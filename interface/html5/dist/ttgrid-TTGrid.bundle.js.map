{"version":3,"sources":["webpack://timetrex/./interface/html5/global/widgets/ttgrid/TTGrid.js"],"names":["TTGrid","table_id","setup","column_info_array","this","getGridId","ui_id","setTableIDElement","table_id_element","$","getTableIDElement","container_selector","i","LocalCacheData","resizeable_grids","length","grid","jqGrid","splice","table_div","default_setup","sub_grid_mode","altRows","data","datatype","sortable","height","parents","width","parent","rowNum","colNames","colModel","multiselect","multiselectWidth","multiboxonly","viewrecords","autoencode","scrollOffset","verticalResize","resizeGrid","winMultiSelect","max_height","extend","empty","push","noResize","onResizeGrid","setData","clear_grid","clearGridData","setGridParam","trigger","getData","getGridParam","getSetup","getHeight","getWidth","deleteRow","value","resetSelection","setSelection","x1","y1","x2","y2","noScale","parameter_name","unload","reloadGrid","getRecordFromGridById","id","result","each","index","Global","clone","getGridWidth","setGridWidth","w","inner_width","getGridHeight","setGridHeight","h","static_height","setRowData","new_record","getRowData","row_id","row","row_data","getColumnModel","setColumnModel","val","grid2csv","filename","csv_data","headers","tr","document","querySelectorAll","td","textContent","trim","temp_element","createElement","innerHTML","getElementById","getAttribute","replace","join","csv_content","JSFileDownload","getRecordCount","getSelectedRow","getSelectedRows","getSelection","tds","find","selection","x","setTimesheetSelection","selection_obj","trs","addClass","setGridColumnsWidth","column_model","options","treeGrid","tree_mode","min_grid_width","parent_container","is","Debug","Text","innerWidth","grid_width_scrollbar_offset","Math","ceil","scrollHeight","max_grid_width","total_column_width","field","name","widthOrg","getColProp","setColWidth","grid_data","grid_total_width","str","cb_column_width","cb_column_count_adjustment","longest_field_width","column_widths","col","longest_cell_content","label","split","reduce","longer","header_is_longest","column_width_override","j","hasOwnProperty","current_cell_content","toString","calculate_text_width_options","fontSize","fontWeight","calculateTextWidth","equal_column_width","floor","equal_column_width_remainder","adjusted_grid_width","tmp_column_name","tmp_column_width","setColProp","body_width_difference","column_width_adjustment","columns_to_adjust_width","column_width_adjustment_remainder","n","bodyWidth","champ","contender","off","on","debounce","e","stopPropagation","target","grids","filter","t","ttgrid","Arr","current_open_primary_controller","setGridSize","current_open_sub_controller"],"mappings":"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","file":"ttgrid-TTGrid.bundle.js?v=029a48a52d118d8a9a49","sourcesContent":["/**\n * @author: joshr@timetrex.com\n * @description wrapper class for jqgrid in timetrex.\n * Requires free-jqgrid 4.15.4+ and jquery 3.3.1+\n *\n * @param setup\n * @constructor\n */\nTTGrid = function( table_id, setup, column_info_array ) {\n\tthis.getGridId = function() {\n\t\treturn this.ui_id;\n\t};\n\n\tthis.setTableIDElement = function() {\n\t\tthis.table_id_element = $( '#' + this.ui_id );\n\t\treturn true;\n\t};\n\n\tthis.getTableIDElement = function() {\n\t\treturn this.table_id_element;\n\t};\n\n\tif ( !table_id || !setup || !column_info_array ) {\n\t\tDebug.Text( 'ERROR: constructor requires all 3 arguments', 'TTGrid.js', 'TTGrid', 'constructor', 10 );\n\t\treturn;\n\t}\n\n\tthis.ui_id = table_id;\n\n\t// Issue #2891 - Forcing GridUnload can cause grids inside a AComboBox to disappear after repeated opening. Check for container_selector is to mitigate that.\n\tif ( !setup.container_selector ) {\n\t\t// We are unloading grids with the same ID if they exist to help prevent: Uncaught TypeError: Failed to execute 'replaceChild' on 'Node': parameter 2 is not of type 'Node'.\n\t\t// Looping through array in reverse to make sure no index issues after splicing.\n\t\tfor ( var i = LocalCacheData.resizeable_grids.length - 1; i >= 0; i-- ) {\n\t\t\tif ( LocalCacheData.resizeable_grids[i] != null && LocalCacheData.resizeable_grids[i].grid != null && LocalCacheData.resizeable_grids[i].ui_id == this.ui_id ) {\n\t\t\t\tLocalCacheData.resizeable_grids[i].grid.jqGrid( 'GridUnload' );\n\t\t\t\tLocalCacheData.resizeable_grids.splice( i, 1 );\n\t\t\t} else if ( LocalCacheData.resizeable_grids[i] == null || LocalCacheData.resizeable_grids[i].grid == null ) {\n\t\t\t\t// LocalCacheData.resizeable_grids array gets full of null values from resize event and we are making sure to clear it out.\n\t\t\t\tLocalCacheData.resizeable_grids.splice( i, 1 );\n\t\t\t}\n\t\t}\n\t}\n\n\tvar max_height = null;\n\n\tthis.setTableIDElement();\n\tvar table_div = this.getTableIDElement();\n\n\tthis.grid = null;\n\n\tif ( table_div[0] == false ) {\n\t\tDebug.Text( 'ERROR: table_id not found in DOM', 'TTGrid.js', 'TTGrid', 'constructor', 10 );\n\t\treturn;\n\t}\n\n\t//Default grid settings.\n\tvar default_setup = {\n\t\tcontainer_selector: 'body',\n\t\tsub_grid_mode: false,\n\t\taltRows: true,\n\t\tdata: [],\n\t\tdatatype: 'local',\n\t\t//quickEmpty: 'true', //Default is 'quickest', might fix JS Exception: Uncaught TypeError: Failed to execute 'replaceChild' on 'Node': parameter 2 is not of type 'Node', but causes this instead: TTGrid.js?v=11.6.1-20191108:99 Uncaught TypeError: Cannot read property 'cells' of undefined\n\t\tsortable: false,\n\t\theight: table_div.parents( '.view' ).height(),\n\t\twidth: table_div.parent().width(),\n\t\trowNum: 10000,\n\t\tcolNames: [],\n\t\tcolModel: column_info_array,\n\t\tmultiselect: true,\n\t\tmultiselectWidth: 22,\n\t\tmultiboxonly: true,\n\t\tviewrecords: true,\n\t\tautoencode: true,\n\t\tscrollOffset: 0,\n\t\tverticalResize: true, //when the grid resizes do we reisize it vertically? needed for timesheet and subgrid views.\n\t\tresizeGrid: true,\n\t\twinMultiSelect: true\n\t\t// resizeStop: function(width, index){\n\t\t// \t//$this.setGridColumnsWidth(width, index);\n\t\t// }\n\t};\n\n\tif ( setup.max_height === true ) {\n\t\tsetup.max_height = max_height;\n\t}\n\n\tif ( setup ) {\n\t\tsetup = $.extend( {}, default_setup, setup );\n\t} else {\n\t\tsetup = default_setup;\n\t}\n\n\tthis.setup = setup;\n\n\ttable_div.empty(); //should unbind all events bound to the grid.\n\tthis.grid = table_div.jqGrid( setup );\n\n\tLocalCacheData.resizeable_grids.push( this );\n\n\tif ( setup.winMultiSelect === true ) {\n\t\tthis.grid.winMultiSelect();\n\t}\n\n\t//turn off grid resize event (for schedule grids that need to be rebuilt on every resize)\n\tthis.noResize = function() {\n\t\tthis.setup.onResizeGrid = false;\n\t};\n\n\t/**\n\t *\n\t * @param data\n\t */\n\tthis.setData = function( data, clear_grid ) {\n\t\tif ( this.grid ) {\n\t\t\t//Clear grid by default.\n\t\t\tclear_grid = ( clear_grid == null ) ? true : clear_grid;\n\t\t\tif ( clear_grid == true ) {\n\t\t\t\tthis.grid.clearGridData();\n\t\t\t}\n\n\t\t\tthis.grid.setGridParam( { 'data': data } ).trigger( 'reloadGrid' );\n\t\t\t//this.setGridColumnsWidth();\n\t\t} else {\n\t\t\tthrow( 'ERROR: Grid is not ready yet.' );\n\t\t}\n\t};\n\tthis.getData = function() {\n\t\treturn this.getGridParam( 'data' );\n\t};\n\n\tthis.getSetup = function() {\n\t\treturn this.getGridParam( 'data' );\n\t};\n\n\tthis.getHeight = function() {\n\t\treturn $( this.grid ).height();\n\t};\n\tthis.getWidth = function() {\n\t\treturn $( this.grid ).width();\n\t};\n\n\t/**\n\t *\n\t * @param value\n\t */\n\tthis.deleteRow = function( value ) {\n\t\tthis.grid.jqGrid( 'delRowData', value );\n\t};\n\n\tthis.resetSelection = function() {\n\t\tthis.grid.resetSelection();\n\t};\n\n\tthis.setSelection = function( x1, y1, x2, y2, noScale ) {\n\t\tthis.grid.setSelection( x1, y1, x2, y2, noScale );\n\t};\n\n\tthis.getGridParam = function( parameter_name ) {\n\t\treturn this.grid.getGridParam( parameter_name );\n\t};\n\n\tthis.setGridParam = function( parameter_name, value ) {\n\t\treturn this.grid.setGridParam( parameter_name, value );\n\t};\n\n\tthis.unload = function() {\n\t\tif ( this.grid ) {\n\t\t\tthis.grid.jqGrid( 'GridUnload' );\n\t\t\tthis.grid = null;\n\t\t}\n\t\treturn true;\n\t};\n\n\tthis.clearGridData = function() {\n\t\tthis.grid.jqGrid( 'clearGridData', true );\n\t};\n\n\tthis.reloadGrid = function() {\n\t\tthis.grid.trigger( 'reloadGrid' );\n\t};\n\n\tthis.getRecordFromGridById = function( id ) {\n\t\tvar data = this.grid.getGridParam( 'data' );\n\t\tvar result = null;\n\t\t/* jshint ignore:start */\n\t\t//id could be string or number.\n\t\t$.each( data, function( index, value ) {\n\n\t\t\tif ( value['_id_'] == id ) {\n\t\t\t\tresult = Global.clone( value );\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t} );\n\t\t/* jshint ignore:end */\n\n\t\tif ( result ) {\n\t\t\tresult.id = result['_id_'];\n\t\t}\n\t\treturn result;\n\n\t};\n\n\tthis.getGridWidth = function() {\n\t\tif ( this.grid ) {\n\t\t\treturn this.grid.width();\n\t\t}\n\t\treturn 0;\n\t};\n\n\tthis.setGridWidth = function( w, inner_width ) {\n\t\tif ( this.grid ) {\n\t\t\tif ( inner_width > w ) {\n\t\t\t\tw = inner_width;\n\t\t\t}\n\t\t\tthis.grid.setGridWidth( w );\n\t\t}\n\t};\n\n\tthis.getGridHeight = function() {\n\t\tif ( this.grid ) {\n\t\t\treturn this.grid.height();\n\t\t}\n\t\treturn 0;\n\t};\n\tthis.setGridHeight = function( h ) {\n\t\tif ( this.setup.static_height ) {\n\t\t\th = this.setup.static_height;\n\t\t}\n\n\t\tif ( this.grid ) {\n\t\t\tthis.grid.setGridHeight( h );\n\t\t}\n\t};\n\n\tthis.setRowData = function( id, new_record ) {\n\t\tthis.grid.setRowData( id, new_record );\n\t};\n\n\tthis.getRowData = function( row_id ) {\n\t\tvar row = false;\n\n\t\tvar row_data = this.getData();\n\n\t\tfor ( var i in row_data ) {\n\t\t\tif ( row_data[i].id == row_id ) {\n\t\t\t\trow = row_data[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn row;\n\t};\n\n\tthis.getColumnModel = function() {\n\t\treturn this.getGridParam( 'colModel' );\n\t};\n\n\tthis.setColumnModel = function( val ) {\n\t\tthis.getGridParam( 'colModel', val );\n\t};\n\n\tthis.grid2csv = function( filename ) {\n\t\t// TODO: Add in more robust quote escaping to handle data strings that have quotes. Currently we are just wrapping everything in double quotes.\n\n\t\tlet csv_data = [];\n\n\t\t// Get grid data for csv.\n\t\t// Column headers are in a different table. Seems to be a jqGrid thing?\n\t\t// Parsing column headers using aria-describedby on the first none blank <tr> (2nd) which links to the id of the header and from there gets the textContent.\n\t\tlet i = 1;\n\t\tlet headers = [];\n\t\tfor ( let tr of document.querySelectorAll( '#' + this.getGridId() + ' tr' ) ) {\n\t\t\tlet row = [];\n\t\t\tfor ( let td of tr.querySelectorAll( 'td' ) ) {\n\t\t\t\trow.push( '\"' + td.textContent.trim() + '\"' );\n\t\t\t\tif ( i === 2 ) {\n\t\t\t\t\t// Column headers sometimes contain HTML such as Claim<br>Dependents.\n\t\t\t\t\t// Using a temporary element to replace <br> with a space and then grabbing the textContent to strip the HTML.\n\t\t\t\t\tlet temp_element = document.createElement( 'div' );\n\t\t\t\t\ttemp_element.innerHTML = document.getElementById( td.getAttribute( 'aria-describedby' ) ).innerHTML.replace( '<br>', ' ' );\n\t\t\t\t\theaders.push( '\"' + temp_element.textContent.trim() + '\"' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tcsv_data.push( row.join( ',' ) );\n\t\t\ti++;\n\t\t}\n\n\t\t// Replace blank row with table headers\n\t\tcsv_data[0] = headers.join( ',' );\n\n\t\tlet csv_content = csv_data.join( '\\r\\n' );\n\n\t\tGlobal.JSFileDownload( filename + '.csv', csv_content, 'text/csv;encoding:utf-8' );\n\n\t}\n\n\tthis.getRecordCount = function() {\n\t\tif ( !this.grid ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.grid.getGridParam( 'reccount' );\n\t};\n\n\t//Gets a single row\n\tthis.getSelectedRow = function() {\n\t\tif ( !this.grid ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar result = this.grid.getGridParam( 'selrow' );\n\n\t\tif ( !result ) {\n\t\t\tresult = false;\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t//Gets an array of rows if multiple are selected.\n\tthis.getSelectedRows = function() {\n\t\tif ( !this.grid ) {\n\t\t\treturn []; //Return empty array so .length on the result doesn't fail with Cannot read property 'length' of undefined\n\t\t}\n\n\t\tvar result = this.grid.getGridParam( 'selarrrow' );\n\n\t\tif ( !result ) {\n\t\t\tresult = [];\n\t\t}\n\n\t\treturn result;\n\t};\n\n\tthis.getSelection = function() {\n\t\tvar tds = this.grid.find( 'td.ui-state-highlight' );\n\n\t\tvar selection = [];\n\t\tfor ( var x = 0; x < tds.length; x++ ) {\n\t\t\tselection.push( {\n\t\t\t\ttr: $( tds[x] ).parent( 'tr' ).index(),\n\t\t\t\ttd: $( tds[x] ).index()\n\t\t\t} );\n\t\t}\n\t\treturn selection;\n\t},\n\n\t\tthis.setTimesheetSelection = function( selection_obj ) {\n\t\t\t//This is currently broken, it highlights the cells, but they aren't actually considered \"selected\".\n\t\t\t// So if you go to Attendance -> TimeSheet, select two cells, Mass Edit them, click Save, the \"Mass Edit\" is no longer available to be clicked again.\n\t\t\t// As well if you hold in SHIFT to try and expand the selection (select more cells), that doesn't work either.\n\t\t\tvar trs = this.grid.find( 'tr' );\n\t\t\tfor ( var i = 0; i < selection_obj.length; i++ ) {\n\t\t\t\tfor ( var x = 0; x < trs.length; x++ ) {\n\t\t\t\t\tif ( $( trs[x] ).index() == selection_obj[i].tr ) {\n\t\t\t\t\t\tvar tds = $( trs[x] ).find( 'td' );\n\t\t\t\t\t\tfor ( var w = 0; w < tds.length; w++ ) {\n\t\t\t\t\t\t\tif ( $( tds[w] ).index() == selection_obj[i].td ) {\n\t\t\t\t\t\t\t\t$( tds[w] ).addClass( 'ui-state-highlight' );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\tthis.setGridColumnsWidth = function( column_model, options ) {\n\t\t// this.grid.autoResizeAllColumns();\n\t\t// return;\n\t\tif ( this.setup.treeGrid || this.setup.tree_mode ) {\n\t\t\tthis.setGridWidth( $( this.setup.container_selector ).width() - 12 );\n\t\t\treturn;\n\t\t}\n\n\t\tif ( typeof options === 'undefined' ) {\n\t\t\toptions = {};\n\t\t}\n\n\t\tif ( this.setup.container_selector && ( !options.min_grid_width || options.min_grid_width == 0 ) ) {\n\t\t\tvar parent_container = this.grid.parents( this.setup.container_selector ).find( '.edit-view-tab' );\n\t\t\tif ( parent_container.length > 0 ) {\n\t\t\t\t//Sub-View grid, check if parent div is visible, and if not don't bother resizing grid.\n\t\t\t\tif ( parent_container.is( ':visible' ) === true ) {\n\t\t\t\t\toptions.min_grid_width = parent_container.innerWidth();\n\t\t\t\t} else {\n\t\t\t\t\tDebug.Text( '  Parent container of grid is not visible, skip setting column widths...', 'TTGrid.js', 'TTGrid', 'setGridColumnsWidth', 10 );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//Main grid\n\t\t\t\toptions.min_grid_width = this.grid.parents( this.setup.container_selector ).innerWidth();\n\t\t\t}\n\t\t}\n\n\t\tif ( options.min_grid_width == 0 || options.min_grid_width == 'undefined' ) { //fallback width so it's never sized to zero when render timing collides\n\t\t\toptions.min_grid_width = $( 'body' ).innerWidth();\n\t\t}\n\n\t\t//Adjust for the vertical scrollbar offset that can occur when the items per page always exceeds the screen height.\n\t\tvar grid_width_scrollbar_offset = ( this.grid.parents( '.ui-jqgrid-bdiv' ).length > 0 && Math.ceil( this.grid.parents( '.ui-jqgrid-bdiv' ).height() ) < Math.ceil( this.grid.parents( '.ui-jqgrid-bdiv' )[0].scrollHeight ) ) ? 15 : 0;\n\t\toptions.min_grid_width = options.min_grid_width - grid_width_scrollbar_offset;\n\n\t\tif ( !options.max_grid_width ) {\n\t\t\toptions.max_grid_width = null; //No maximum.\n\t\t}\n\n\t\tif ( options.max_grid_width && options.max_grid_width < options.min_grid_width ) {\n\t\t\toptions.min_grid_width = options.max_grid_width;\n\t\t}\n\n\t\tDebug.Text( 'Target Grid: ' + this.setup.container_selector + ' Target Div: ' + this.grid.parents( this.setup.container_selector ).id + ' Width: Min: ' + options.min_grid_width + ' Max: ' + options.max_grid_width + ' Scrollbar Offset: ' + grid_width_scrollbar_offset + ' Parent Width: ' + $( this.grid.parents( '.edit-view-tab, body' )[0] ).width(), 'TTGrid.js', 'TTGrid', 'setGridColumnsWidth', 10 );\n\n\t\tif ( column_model ) {\n\t\t\tvar total_column_width = 0;\n\t\t\tfor ( var i = 0; i < column_model.length; i++ ) {\n\t\t\t\tvar field = column_model[i].name;\n\t\t\t\tvar width = column_model[i].width ? column_model[i].width : column_model.widthOrg;\n\t\t\t\ttotal_column_width += width;\n\n\t\t\t\t//Don't change the width of columns if they are already the same size. This may help avoid minor changes in the table caused by simple redraws.\n\t\t\t\tif ( this.grid.getColProp( field ).width != width ) {\n\t\t\t\t\tthis.grid.setColWidth( field, width );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn total_column_width;\n\t\t}\n\n\t\tvar column_model = this.getColumnModel();\n\n\t\t//Possible exception\n\t\t//Error: Uncaught TypeError: Cannot read property 'length' of undefined in /interface/html5/#!m=TimeSheet&date=20141102&user_id=53130 line 4288\n\t\tif ( !column_model ) {\n\t\t\tDebug.Text( 'ERROR: column_model is null or undefined', 'TTGrid.js', 'TTGrid', 'setGridColumnsWidth', 10 );\n\t\t\treturn;\n\t\t}\n\n\t\tfunction longer( champ, contender ) {\n\t\t\treturn ( contender.length > champ.length ) ? contender : champ;\n\t\t}\n\n\t\tfunction longestWord( str ) {\n\t\t\tif ( str ) {\n\t\t\t\tvar words = str.split( ' ' );\n\t\t\t\treturn words.reduce( longer );\n\t\t\t} else {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\t\tvar grid_data = this.getData();\n\t\tthis.grid_total_width = 0;\n\n\t\tvar cb_column_width = 0; //checkbox column width, usually 22, but only set once we know there is a checkbox column.\n\t\tvar cb_column_count_adjustment = 0; //If the checkbox column exists or not.\n\n\t\tvar longest_field_width = 0;\n\t\tvar last_column = null;\n\t\tvar column_widths = {};\n\n\t\tfor ( var i = 0; i < column_model.length; i++ ) {\n\t\t\tvar col = column_model[i];\n\t\t\tlast_column = col;\n\t\t\tvar field = col.name;\n\t\t\tvar longest_cell_content = longestWord( col.label ); // allow extra space for sort orer ui hint\n\t\t\tvar header_is_longest = true;\n\n\t\t\tif ( field == 'cb' ) { //hard coded override on CB column, so we don't try to check the data in each row for it.\n\t\t\t\tcb_column_count_adjustment = 1;\n\t\t\t\tcb_column_width = 22;\n\t\t\t\twidth = cb_column_width;\n\t\t\t} else {\n\t\t\t\tif ( options.column_width_override && options.column_width_override[field] ) {\n\t\t\t\t\twidth = options.column_width_override[field];\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var j = 0; j < grid_data.length; j++ ) {\n\t\t\t\t\t\tvar row_data = grid_data[j];\n\t\t\t\t\t\tif ( !row_data.hasOwnProperty( field ) ) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar current_cell_content = row_data[field];\n\t\t\t\t\t\tif ( !current_cell_content ) {\n\t\t\t\t\t\t\tcurrent_cell_content = '';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( !longest_cell_content ) {\n\t\t\t\t\t\t\tlongest_cell_content = current_cell_content.toString();\n\t\t\t\t\t\t\theader_is_longest = false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif ( current_cell_content && current_cell_content.toString().length > longest_cell_content.length ) {\n\t\t\t\t\t\t\t\tlongest_cell_content = current_cell_content.toString();\n\t\t\t\t\t\t\t\theader_is_longest = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvar calculate_text_width_options;\n\t\t\t\t\tif ( longest_cell_content == field ) {\n\t\t\t\t\t\tcalculate_text_width_options = { fontSize: '11px', fontWeight: 'bolder' };\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcalculate_text_width_options = { fontSize: '11px', fontWeight: 'normal' };\n\t\t\t\t\t}\n\n\t\t\t\t\tvar width = Global.calculateTextWidth( longest_cell_content, calculate_text_width_options ); // + 40; // 8 is drag handle width +2 for borders +20 for sort order ui hint (17 for actual hint,13 for header padding on Firefox under windows\n\n\t\t\t\t\tif ( header_is_longest === true ) {\n\t\t\t\t\t\twidth += 40;\n\t\t\t\t\t} else {\n\t\t\t\t\t\twidth += 12;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( width > longest_field_width ) {\n\t\t\t\tlongest_field_width = width;\n\t\t\t}\n\n\t\t\t//Debug.Text( '    Column: '+ field +' Width: '+ width +' Content: \\''+ longest_cell_content +'\\' Longest Column Width: '+ longest_field_width +' Header is Longest: '+ header_is_longest, 'TTGrid.js', 'TTGrid', 'setGridColumnsWidth', 10 );\n\n\t\t\tcolumn_widths[field] = width;\n\t\t\tthis.grid_total_width += width;\n\t\t}\n\n\t\t//If the longest column width can be used for all columns, size them all equally so they don't change sizes between pages.\n\t\tif ( ( longest_field_width * column_model.length ) <= options.min_grid_width ) {\n\t\t\tvar equal_column_width = Math.floor( ( options.min_grid_width - cb_column_width ) / ( column_model.length - cb_column_count_adjustment ) );\n\t\t\tvar equal_column_width_remainder = ( ( options.min_grid_width - cb_column_width ) % ( column_model.length - cb_column_count_adjustment ) ); //Eliminate partial pixel adjustments.\n\t\t\tDebug.Text( ' Grid columns CAN fit with equal sizes... Grid Width: ' + options.min_grid_width + ' Optimal Grid Width: ' + this.grid_total_width + ' Equal Size Width: ' + equal_column_width + ' Remainder: ' + equal_column_width_remainder, 'TTGrid.js', 'TTGrid', 'setGridColumnsWidth', 10 );\n\n\t\t\tvar adjusted_grid_width = 0;\n\n\t\t\tvar x = 0;\n\t\t\tfor ( var tmp_column_name in column_widths ) {\n\t\t\t\tif ( tmp_column_name == 'cb' ) {\n\t\t\t\t\tthis.grid.setColWidth( 'cb', cb_column_width );\n\t\t\t\t\tadjusted_grid_width += cb_column_width;\n\t\t\t\t} else {\n\t\t\t\t\tvar tmp_column_width = equal_column_width;\n\n\t\t\t\t\tif ( x == 1 ) {\n\t\t\t\t\t\ttmp_column_width += equal_column_width_remainder;\n\t\t\t\t\t}\n\n\t\t\t\t\t//Debug.Text( '    Adjusted Column: '+ tmp_column_name +' Width: Old: '+ column_widths[tmp_column_name] +' New: '+ tmp_column_width, 'TTGrid.js', 'TTGrid', 'setGridColumnsWidth', 10 );\n\t\t\t\t\tif ( this.grid.getColProp( tmp_column_name ).width != tmp_column_width ) {\n\t\t\t\t\t\tthis.grid.setColWidth( tmp_column_name, tmp_column_width );\n\t\t\t\t\t}\n\t\t\t\t\tadjusted_grid_width += tmp_column_width;\n\t\t\t\t}\n\n\t\t\t\tthis.grid.setColProp( tmp_column_name, 'fixed', true );\n\n\t\t\t\tx++;\n\t\t\t}\n\t\t\tDebug.Text( ' Adjusted Grid Width: ' + adjusted_grid_width + ' Adjusted Column Remainder: ' + equal_column_width_remainder, 'TTGrid.js', 'TTGrid', 'setGridColumnsWidth', 10 );\n\n\t\t\tthis.grid_total_width = options.min_grid_width;\n\t\t} else {\n\t\t\tDebug.Text( ' Optimal Grid Width: ' + this.grid_total_width + ' Equal Size Width: ' + ( longest_field_width * column_model.length ), 'TTGrid.js', 'TTGrid', 'setGridColumnsWidth', 10 );\n\n\t\t\tvar body_width_difference = 0;\n\t\t\tvar column_width_adjustment = 0;\n\t\t\tvar columns_to_adjust_width = 0;\n\t\t\tvar column_width_adjustment_remainder = 0;\n\n\t\t\t//If the optimal column widths are wider than the max grid width, shrink them to fit.\n\t\t\tif ( ( options.max_grid_width > 0 && this.grid_total_width > options.max_grid_width ) || ( options.min_grid_width > 0 && this.grid_total_width < options.min_grid_width ) ) {\n\t\t\t\t//When columns are too small to fit on the screen and need to be stretched, ignore the overridden column.\n\t\t\t\tif ( ( options.max_grid_width > 0 && this.grid_total_width > options.max_grid_width ) ) {\n\t\t\t\t\tbody_width_difference = this.grid_total_width - options.max_grid_width; //Should be a negative difference to shrink columns to fit max width.\n\t\t\t\t\tthis.grid_total_width = options.max_grid_width;\n\t\t\t\t} else {\n\t\t\t\t\tbody_width_difference = options.min_grid_width - this.grid_total_width; //Should be a positive difference to grow columns to fit min width.\n\t\t\t\t\tthis.grid_total_width = options.min_grid_width;\n\t\t\t\t}\n\n\t\t\t\tif ( body_width_difference != 0 ) {\n\t\t\t\t\tif ( options.column_width_override ) {\n\t\t\t\t\t\tcolumns_to_adjust_width = ( column_model.length - options.column_width_override.length() );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcolumns_to_adjust_width = ( column_model.length - cb_column_count_adjustment );\n\t\t\t\t\t}\n\t\t\t\t\tcolumn_width_adjustment = Math.floor( body_width_difference / columns_to_adjust_width );\n\t\t\t\t\tcolumn_width_adjustment_remainder = ( body_width_difference % columns_to_adjust_width ); //Eliminate partial pixel adjustments.\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar adjusted_grid_width = 0;\n\n\t\t\tvar x = 0;\n\t\t\tfor ( var tmp_column_name in column_widths ) {\n\t\t\t\tif ( tmp_column_name == 'cb' ) {\n\t\t\t\t\tthis.grid.setColWidth( 'cb', cb_column_width );\n\t\t\t\t\tadjusted_grid_width += cb_column_width;\n\t\t\t\t} else {\n\t\t\t\t\tvar tmp_column_width;\n\t\t\t\t\tif ( options.column_width_override && options.column_width_override[n] ) {\n\t\t\t\t\t\ttmp_column_width = column_widths[tmp_column_name];\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttmp_column_width = column_widths[tmp_column_name] + column_width_adjustment;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( x == 1 ) { //First column after the CB.\n\t\t\t\t\t\ttmp_column_width += column_width_adjustment_remainder;\n\t\t\t\t\t}\n\n\t\t\t\t\tDebug.Text( '    Adjusted Column: ' + tmp_column_name + ' Width: Old: ' + column_widths[tmp_column_name] + ' New: ' + tmp_column_width + ' Adjustment: ' + column_width_adjustment + ' Body Difference: ' + body_width_difference + ' Columns Adjusted: ' + columns_to_adjust_width, 'TTGrid.js', 'TTGrid', 'setGridColumnsWidth', 10 );\n\t\t\t\t\tif ( this.grid.getColProp( tmp_column_name ).width != tmp_column_width ) {\n\t\t\t\t\t\tthis.grid.setColWidth( tmp_column_name, tmp_column_width );\n\t\t\t\t\t}\n\t\t\t\t\tadjusted_grid_width += tmp_column_width;\n\t\t\t\t}\n\t\t\t\tthis.grid.setColProp( tmp_column_name, 'fixed', true );\n\n\t\t\t\tx++;\n\t\t\t}\n\t\t\t//Debug.Text( ' Adjusted Grid Width: '+ adjusted_grid_width +' Adjusted Column Remainder: '+ column_width_adjustment_remainder, 'TTGrid.js', 'TTGrid', 'setGridColumnsWidth', 10 );\n\t\t}\n\n\t\t//this.setGridWidth( this.grid_total_width, this.grid_total_width ); //Causes columns with to flucuate, specifically in schedule day mode.\n\t\tDebug.Text( ' FINAL Grid width: ' + this.grid_total_width + ' Body Width: ' + Global.bodyWidth() + ' Total Rows: ' + grid_data.length, 'TTGrid.js', 'TTGrid', 'setGridColumnsWidth', 10 );\n\t\treturn this.grid_total_width;\n\t};\n\n\t//resize event.\n\t$( '#contentContainer' ).off( 'resize' ).on( 'resize', Global.debounce( function TTGridResizeEvent( e ) {\n\t\te.stopPropagation();\n\t\tDebug.Text( ' Window resize event hit by TTGrid. Target: ' + e.target, 'TTGrid.js', 'TTGrid', 'setGridColumnsWidth', 10 );\n\n\t\tif ( LocalCacheData.resizeable_grids.length > 0 ) {\n\n\t\t\t//remove the nulls\n\t\t\tvar grids = LocalCacheData.resizeable_grids.filter( function( t ) {\n\t\t\t\treturn t != null;\n\t\t\t} );\n\t\t\tLocalCacheData.resizeable_grids = grids;\n\n\t\t\tfor ( var i in LocalCacheData.resizeable_grids ) {\n\t\t\t\tvar ttgrid = LocalCacheData.resizeable_grids[i];\n\n\t\t\t\tif ( !ttgrid || ( typeof ttgrid.getTableIDElement === 'function' && ttgrid.getTableIDElement().length === 0 ) || !ttgrid.grid || ttgrid.setup.onResizeGrid === false ) {\n\t\t\t\t\tDebug.Arr( LocalCacheData.resizeable_grids, ' Grid ignored ' + i, 'TTGrid.js', 'TTGrid', 'setGridColumnsWidth', 10 );\n\t\t\t\t\tLocalCacheData.resizeable_grids[i] = null;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t//Try to only resize visible grids. ie: Switch from Audit tab to primary tab, wait until resize event is triggered, then switch back, triggering \"flashing\" of scroll bars appearing/disappearing\n\t\t\t\t// Only happens on edit views with double row fields (ie: Note fields), like Edit Punch or Edit Schedule.\n\t\t\t\tif ( ttgrid.getTableIDElement().is( ':visible' ) ) {\n\t\t\t\t\tDebug.Text( ' Processing: ' + ttgrid.ui_id, 'TTGrid.js', 'TTGrid', 'setGridColumnsWidth', 10 );\n\t\t\t\t\tif ( ttgrid.setup.onResizeGrid && typeof ttgrid.setup.onResizeGrid == 'function' ) {\n\t\t\t\t\t\tDebug.Text( ' TTGrid invoked setup defined onResizeGrid() for ' + ttgrid.ui_id, 'TTGrid.js', 'TTGrid', 'setGridColumnsWidth', 10 );\n\t\t\t\t\t\tttgrid.setup.onResizeGrid();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ( ttgrid.grid.length == 1 ) {\n\t\t\t\t\t\t\tDebug.Text( ' TTGrid invoked TTgrid::setGridColumnsWidth() for ' + ttgrid.ui_id, 'TTGrid.js', 'TTGrid', 'setGridColumnsWidth', 10 );\n\t\t\t\t\t\t\tttgrid.setGridColumnsWidth();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tDebug.Text( ' Skipping grid that is not visible: ' + ttgrid.ui_id, 'TTGrid.js', 'TTGrid', 'setGridColumnsWidth', 10 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//Usually we will want to make double sure that visible search grids resize.\n\t\t\t//Have to check for grid though because dashboard has no \"search grid\"\n\t\t\tif ( LocalCacheData.current_open_primary_controller && LocalCacheData.current_open_primary_controller.grid ) {\n\t\t\t\tLocalCacheData.current_open_primary_controller.setGridColumnsWidth(); //Be sure to call the setGridColumnsWidth() from current_open_primary_controller in case its overridden.\n\t\t\t\tLocalCacheData.current_open_primary_controller.setGridSize();\n\t\t\t}\n\n\t\t\t//Also resize grids inside Edit Views.\n\t\t\tif ( LocalCacheData.current_open_sub_controller && LocalCacheData.current_open_sub_controller.grid ) {\n\t\t\t\tLocalCacheData.current_open_sub_controller.setGridColumnsWidth(); //Be sure to call the setGridColumnsWidth() from current_open_sub_controller in case its overridden.\n\t\t\t\tLocalCacheData.current_open_sub_controller.setGridSize();\n\t\t\t}\n\t\t}\n\t}, 500 ) );\n};"],"sourceRoot":""}